Editing/saving/syncing etc:

Each form locally maintains its own state
    state object will have a localState object, indexed on id which keeps track of any local changes, not saved. 
    Form component (the meat of each object page, does all edits additions etc)
    Form component will start using localState as soon as a change is made, and on load will check for this. main state project object will also be supplied, and the questions will be able to tell which changes have been made
    Each form can be seperately saved, which will remove the localState and update the project object.
    All changes can be saved at once, from the changes screen.

Better project structure:
current structure issues:
    having the objects in an array for each type means we have to use .find to find our object, this is slow for large lists
    can we have each object be indexed on it's id?
        we can still loop over the contents, like an array
        allows fast access for getting and updating
Each object page needs fast access to read/write files

Application structure:

preload.js exposes protected apis to the renderer process
webworkers have access to node modules directly, can be imported

all "api requests" create webworkers (one per request) which do the actual behavior
    things like reading/writing files, parsing, imageprocessing etc.
    any context data will need to be passed into the webworker message

data form editor:
    form: the form
    standalone: if it is the standalone version
    path: array of keys from the state/comments/basegame to this object type
    value: the data it edits, or default for it
    @save -> emits the form object
    @discard -> emits

    two modes, standalone and integrated
    standalone emits save and discard events, save needs to be bound. Both clear the form.
    integrated emits vuex events, gets the data, comments, and basegame itself
        